{"Generate django secret key": "Generate django secret key\ndjango\n\npython3 -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'\n", "Remove GRUB startup menu": "Remove GRUB startup menu\nlinux\n\nsudo vim /etc/default/grub\nThen set GRUB_TIMEOUT to 0\n", "See all installed packages": "See all installed packages\nlinux\n\npacman -Q\npacman -Qqe\n", "Chroot into broken system": "Chroot into broken system\nlinux\n\nGet live arch usb, boot into it, then run:\n\nmkdir mnt\nmount /dev/sdaXY mnt\n\n/dev/sdaXY is the main OS partition, you can find it by running fdisk -l\n", "Android File Transfer": "Android File Transfer\nlinux\n\naft-mtp-mount ~/mnt\n", "Android Debug Bridge (ADB) to remove Android bloatware": "Android Debug Bridge (ADB) to remove Android bloatware\nlinux\n\nadb devices\nadb shell\n\npm list packages\npm list packages -d\npm list packages -e\npm list packages | grep \"google\"\n\npm disable-user com.google.bloatware\nadb uninstall com.google.bloatware\n", "Delete all files in .gitignore from remote": "Delete all files in .gitignore from remote\ngit\n\ngit rm --cached `git ls-files -i -c --exclude-from=.gitignore`\n", "Python Telegram Bot": "Python Telegram Bot\npython\n\nfrom telegram.ext import Application, MessageHandler, CommandHandler\nfrom telegram.ext.filters import TEXT\n\nasync def get_chat_id(update, context):\n    chat_id = update.message.chat_id\n    print(f\"User's chat ID: {chat_id}\")\n    await update.message.reply_text(f\"Your chat ID is {chat_id}\")\n\nif __name__ == \"__main__\":\n    TOKEN = \"YOUR_BOT_TOKEN\"\n    \n    # Create the application\n    application = Application.builder().token(TOKEN).build()\n\n    # Register the handler for text messages\n    application.add_handler(MessageHandler(TEXT, get_chat_id))\n\n    # Start polling\n    print(\"Bot is running. Send a message to it to get the chat ID.\")\n    application.run_polling()\n", "No module named pip": "No module named pip\npython\n\npython3 -m ensurepip\n", "Convert png to jpg using ffmpeg": "Convert png to jpg using ffmpeg\nlinux\n\n# To convert a single file\nffmpeg -i file.png new_file.jpg\n\n# To convert all files in dir\nfor file in *.png; do ffmpeg -i \"$file\" \"${file%.*}.jpg\"; done\n", "JS Cookies": "JS Cookies\nJS\n\nfunction getCookie(name) {\n    const cookies = document.cookie.split(\"; \");\n    for (let cookie of cookies) {\n        const [key, value] = cookie.split(\"=\");\n        if (key == name) return JSON.parse(value);\n    }\n    return null;\n}\n\nfunction setCookie(name, value, days) {\n    const expires = new Date(Date.now() + days * 24 * 60 * 60 * 1000).toUTCString();\n    document.cookie = `${name}=${JSON.stringify(value)}; expires=${expires}; path=/`;\n}\n", "Convert text after tesseract": "Convert text after tesseract\nUtils\n\ntext = \"\"\"\n\u041e\u0441\u043e\u0431\u043e\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043c\u044b \u0443\u0434\u0435\u043b\u044f\u0435\u043c \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u044e.\n\u041d\u0430\u0448\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u043e\u0432 \u0432\u0441\u0435\u0433\u0434\u0430 \u0433\u043e\u0442\u043e\u0432\u0430\n\u043f\u043e\u043c\u043e\u0447\u044c \u0432\u0430\u043c \u0441 \u0432\u044b\u0431\u043e\u0440\u043e\u043c \u0431\u043b\u044e\u0434, \u043f\u043e\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c\n\u0438\u0434\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u043f\u0438\u0442\u043e\u043a \u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0442\u0443 \u0441\u0430\u043c\u0443\u044e \u0430\u0442\u043c\u043e\u0441\u0444\u0435-\n\u0440\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u044b \u0437\u0430\u0445\u043e\u0442\u0438\u0442\u0435 \u0437\u0430\u043f\u043e\u043c\u043d\u0438\u0442\u044c.\n\"\"\"\n\nstrings = text.split('\\n')\nresult = ''\nfor i in strings:\n    if len(i) > 0:\n        if i[-1] == '-':\n            i = i[0:-2]\n        elif i[-1] == '.':\n            i += ' '\n    result += i\n\nprint(result)\n\n", "wp_rest": "wp_rest\nprj\n\nFix the text on pages with big banner\n\nFix adap header margins\n\nChange languages buttons on adap\n\nChange header's opacity only when scrolling down\n\nChange About Us\n\n\n\n\n\n# Finish bucket\n\n# Finish adapting background images\n# Update footer\n# Fix gallery\n# Fix adapt menu:\n# - On closure\n# - The buttons\n# Fix reviews on home page\n# Fix food menu adapt\n# Connect bron form to WP\n# Make \"Load More\" buttons on:\n# - Reviews page\n# - Gallery page\n# Fix second banner on home page\n", "Unzip tar zst": "Unzip tar zst\nutils\n\ntar --use-compress-program=unzstd -xvf file.tar.zst\n", "Rename multiple lines in bash": "Rename multiple lines in bash\nutils\n\nfor f in file*.jpg; do mv \"$f\" \"renamed_$f\"; done\n", "Image manipulation with Image Magick": "Image manipulation with Image Magick\nutils\n\n# Change background\nfor file in *.jpg; do magick \"$file\" -transparent \"#FFCC00\" \"${file%.jpg}.png\"; done\n\n# To trim all png images\nfor file in *.png; do magick \"$file\" -trim +repage \"$file\"; done\n\n# To trim and convert all png images to jpg\nfor file in *.png; do magick \"$file\" -trim -background white -flatten \"${file%.*}.jpg\"; done\n\n# To remove background from image\nmagick order_white.jpeg -transparent \"#F7F7F7\" output.png\n\n# Additional settings to increase accuracy\nmagick order_white.jpeg -fuzz 2% -transparent \"#F7F7F7\" -despeckle -alpha extract -blur 0x2 -threshold 50% -alpha copy -background none -alpha background output.png\n\n# Increase image quality\nmagick order.png -resize 200% -filter Lanczos -noise 2 -blur 0x0.7 -unsharp 0x1 output.png\n\n# Make them have square backgrounds\nfor img in *.{png,jpg}; do \n    size=$(identify -format \"%[fx:max(w,h)]\" \"$img\")\n    convert \"$img\" -resize \"${size}x${size}\" -background white -gravity center -extent \"${size}x${size}\" \"square_$img\"\ndone\n", "WP WooCommerce commands": "WP WooCommerce commands\nwp\n\n$product_id = $product->get_id();             // Get product ID\n$title = $product->get_name();                // Get product title\n$description = $product->get_description();   // Full description\n$short_desc = $product->get_short_description(); // Short description\n$price = $product->get_price();               // Get price (raw number)\n$price_html = $product->get_price_html();     // Get formatted price\n$image_url = wp_get_attachment_url($product->get_image_id()); // Get main image\n\n$categories = wc_get_product_category_list($product->get_id()); // Get categories as links\n$tags = wc_get_product_tag_list($product->get_id()); // Get tags as links\n\nSince you're working with a custom WooCommerce theme, you can use the **global `$product` object** to get product data inside the loop. Here are some useful methods:\n\n---\n\n### **Accessing the `$product` Object**\nFirst, ensure you **declare `$product` as global** inside your loop:\n\n```php\nglobal $product;\n```\n\n---\n\n### **Fetching Basic Product Information**\n```php\n$product_id = $product->get_id();             // Get product ID\n$title = $product->get_name();                // Get product title\n$description = $product->get_description();   // Full description\n$short_desc = $product->get_short_description(); // Short description\n$price = $product->get_price();               // Get price (raw number)\n$price_html = $product->get_price_html();     // Get formatted price\n$image_url = wp_get_attachment_url($product->get_image_id()); // Get main image\n```\n\n---\n\n### **Fetching Product Categories & Tags**\n```php\n$categories = wc_get_product_category_list($product->get_id()); // Get categories as links\n$tags = wc_get_product_tag_list($product->get_id()); // Get tags as links\n```\n\nIf you need **raw category names**, do this:\n```php\n$product_cats = get_the_terms($product->get_id(), 'product_cat');\nif ($product_cats && !is_wp_error($product_cats)) {\n    foreach ($product_cats as $cat) {\n        echo $cat->name . '<br>'; // Display category names\n    }\n}\n```\n\n---\n\n### **Fetching Stock Information**\n```php\n$stock_status = $product->get_stock_status(); // \"instock\" or \"outofstock\"\n$stock_quantity = $product->get_stock_quantity(); // Get stock quantity\n$backorders = $product->get_backorders(); // \"yes\", \"no\", or \"notify\"\n```\n\n---\n\n### **Fetching Add to Cart Data**\n```php\n$add_to_cart_url = $product->add_to_cart_url(); // URL to add to cart\n$add_to_cart_text = $product->add_to_cart_text(); // Button text\n```\n\n---\n\n### **Loop Example with `$product` Data**\nHere\u2019s how you can integrate this into your loop:\n\n```php\n<?php\n$args = array(\n    'post_type'      => 'product',\n    'posts_per_page' => 10,\n    'orderby'        => 'title',\n    'order'          => 'ASC',\n);\n\n$products = new WP_Query($args);\n\nif ($products->have_posts()) :\n    while ($products->have_posts()) : $products->the_post();\n        global $product; // WooCommerce global product object\n\n        $image_url = wp_get_attachment_url($product->get_image_id()); \n        ?>\n        <div class=\"dish\">\n            <img src=\"<?php echo esc_url($image_url); ?>\" alt=\"<?php echo esc_attr($product->get_name()); ?>\">\n            <div class=\"info\">\n                <b><?php echo esc_html($product->get_name()); ?></b>\n                <b class=\"about\"><?php echo wp_kses_post($product->get_short_description()); ?></b>\n                <p class=\"price\"><?php echo wp_kses_post($product->get_price_html()); ?></p>\n                <a href=\"<?php echo esc_url($product->add_to_cart_url()); ?>\" class=\"button\">\n                    <?php echo esc_html($product->add_to_cart_text()); ?>\n                </a>\n            </div>\n        </div>\n        <?php\n    endwhile;\n    wp_reset_postdata();\nelse :\n    echo '<p>No products found.</p>';\nendif;\n?>\n```\n\n---\n\n### **Key Takeaways**\n- Always **declare `$product` as global** inside the loop.\n- Use `$product->get_*()` methods to fetch details.\n- Use `wp_kses_post()` for content, `esc_html()` for text, and `esc_url()` for links.\n\nLet me know if you need anything else! \ud83d\ude80\n", "Arch linux live usb": "Arch linux live usb\nlinux\n\nlsblk\n\nsudo dd bs=4M if=/path/to/archlinux.iso of=/dev/sdX status=progress oflag=sync\n\nsync && sudo eject /dev/sdX\n", "Record screen on wayland": "Record screen on wayland\nlinux\n\nwf-recorder\n", "Saturate color so it wouldn't change with opacity": "Saturate color so it wouldn't change with opacity\ncss\n\ndef blend_rgb(original_rgb, background_rgb, opacity):\n    \"\"\"\n    Blends an original RGB color with a background RGB color based on opacity.\n\n    Parameters:\n        original_rgb (tuple): The original RGB color as a tuple (R, G, B).\n        background_rgb (tuple): The background RGB color as a tuple (R, G, B).\n        opacity (float): The opacity of the original color (0.0 to 1.0).\n\n    Returns:\n        tuple: The blended RGB color as a tuple (R, G, B).\n    \"\"\"\n    blended_rgb = (\n        int(round(opacity * original_rgb[0] + (1 - opacity) * background_rgb[0])),\n        int(round(opacity * original_rgb[1] + (1 - opacity) * background_rgb[1])),\n        int(round(opacity * original_rgb[2] + (1 - opacity) * background_rgb[2]))\n    )\n    return blended_rgb\n", "Manuals and Editions system django": "Manuals and Editions system django\ndjango\n\n## admin.py\n\n```\nfrom django.contrib import admin\nfrom django import forms\nimport json\nfrom .models import Manual, Edition\n\n# Custom form to handle JSON input for the features field\nclass EditionAdminForm(forms.ModelForm):\n    features = forms.CharField(widget=forms.Textarea, help_text=\"Enter features as a JSON list (e.g., ['Feature 1', 'Feature 2'])\")\n\n    class Meta:\n        model = Edition\n        fields = \"__all__\"\n\n    def clean_features(self):\n        \"\"\"Convert user input into a valid JSON list\"\"\"\n        try:\n            features_list = json.loads(self.cleaned_data['features'])\n            if isinstance(features_list, list) and all(isinstance(i, str) for i in features_list):\n                return features_list\n            raise ValueError\n        except (json.JSONDecodeError, ValueError):\n            raise forms.ValidationError(\"Enter a valid JSON list (e.g., ['Feature 1', 'Feature 2'])\")\n\n# Inline Edition editor inside Manual\nclass EditionInline(admin.TabularInline):  # Use StackedInline for a bigger editor\n    model = Edition\n    form = EditionAdminForm\n    extra = 1  # Number of empty forms displayed\n\n# Manual Admin with Inline Editions\n@admin.register(Manual)\nclass ManualAdmin(admin.ModelAdmin):\n    list_display = (\"name\", \"url\", \"show\")\n    search_fields = (\"name\", \"url\")\n    inlines = [EditionInline]  # Attach editions to manual editor\n\n# Separate Edition Admin (Optional)\n@admin.register(Edition)\nclass EditionAdmin(admin.ModelAdmin):\n    form = EditionAdminForm\n    list_display = (\"name\", \"manual\", \"price\", \"sells\")\n    search_fields = (\"name\", \"manual__name\")\n```\n\n## models.py\n\n```\nfrom django.db import models\n\nclass Manual(models.Model):\n    url = models.CharField(max_length=16, unique=True)\n    name = models.CharField(max_length=64, null=True)\n    about = models.TextField()\n    pitch = models.CharField(max_length=128, null=True)\n    show = models.BooleanField()\n\n    def __str__(self):\n        return str(self.name)\n\nclass Edition(models.Model):\n    manual = models.ForeignKey(Manual, on_delete=models.CASCADE, related_name=\"editions\")\n    name = models.CharField(max_length=64, null=True)\n    features = models.JSONField(default=list)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    sells = models.IntegerField()\n```\n", "Git error The following untracked working tree files would be overwritten by merge": "Git error The following untracked working tree files would be overwritten by merge\ngit\n\ngit add *\ngit stash\ngit pull\n\n", "Apache": "Apache\napache\n\nsudo systemctl restart httpd\nsudo systemctl restart php-fpm\n\nsudo vim /etc/httpd/conf/extra/httpd-vhosts.conf\nsudo vim /etc/httpd/conf/httpd.conf\n\nsudo chown -R http:http /srv/http/wordpress\nsudo chmod -R 755 /srv/http/wordpress\n", "Apache adding vhost": "Apache adding vhost\napache\n\nsudo chown -R root:http example\nsudo chmod 755 example\n", "Django remove all migrations": "Django remove all migrations\ndjango\n\nfind . -path \"*/migrations/*.py\" -not -name \"__init__.py\" -delete\nrm db.sqlite3\n", "Remove a file from all previous git commits": "Remove a file from all previous git commits\ngit\n\ngit filter-repo --path <file_or_folder> --invert-paths\ngit push origin --force --all\n", "Docker enter bash": "Docker enter bash\ndocker\n\ndocker exec -it joomla /bin/bash\n"}